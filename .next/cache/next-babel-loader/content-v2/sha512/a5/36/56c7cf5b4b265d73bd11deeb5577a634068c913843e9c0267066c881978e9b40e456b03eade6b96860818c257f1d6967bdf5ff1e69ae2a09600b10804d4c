{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"D:/CNM/prj git/blockchain-crowd/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/CNM/prj git/blockchain-crowd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"D:\\\\CNM\\\\prj git\\\\blockchain-crowd\\\\components\\\\requestrow.jsx\",\n    _this = this;\n\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport Campaign from '../ethereum/campaign';\n\nvar RequestRow = function RequestRow(props) {\n  var Row = Table.Row,\n      Cell = Table.Cell;\n  var id = props.id,\n      request = props.request,\n      approversCount = props.approversCount;\n  var readyToFinalize = request.approvalCount > approversCount / 2;\n\n  var onApprove = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return executeOnBlockchain('approveRequest');\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onApprove() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onFinalize = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return executeOnBlockchain('finalizeRequest');\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onFinalize() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var executeOnBlockchain = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(method) {\n      var campaign, accounts;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              campaign = Campaign(props.address);\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n              _context3.next = 6;\n              return campaign.methods[method](id).send({\n                from: accounts[0]\n              });\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function executeOnBlockchain(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    disabled: request.complete,\n    positive: readyToFinalize && !request.complete,\n    children: [/*#__PURE__*/_jsxDEV(Cell, {\n      children: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Cell, {\n      children: request.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Cell, {\n      textAlign: \"right\",\n      children: web3.utils.fromWei(request.value, 'ether')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Cell, {\n      children: request.recipient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Cell, {\n      textAlign: \"right\",\n      children: [request.approvalCount, \" / \", approversCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Cell, {\n      children: !request.complete && /*#__PURE__*/_jsxDEV(Button, {\n        basic: true,\n        color: \"green\",\n        onClick: onApprove,\n        children: \"Approve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Cell, {\n      children: !request.complete && readyToFinalize && /*#__PURE__*/_jsxDEV(Button, {\n        color: \"teal\",\n        basic: true,\n        onClick: onFinalize,\n        children: \"Finalize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = RequestRow;\nexport default RequestRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"RequestRow\");","map":{"version":3,"sources":["D:/CNM/prj git/blockchain-crowd/components/requestrow.jsx"],"names":["React","Button","Table","web3","Campaign","RequestRow","props","Row","Cell","id","request","approversCount","readyToFinalize","approvalCount","onApprove","executeOnBlockchain","onFinalize","method","campaign","address","eth","getAccounts","accounts","methods","send","from","complete","description","utils","fromWei","value","recipient"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Button, Table } from 'semantic-ui-react';\r\nimport web3 from '../ethereum/web3'; \r\nimport Campaign from '../ethereum/campaign';\r\n\r\nconst RequestRow = (props) => {\r\n  const { Row, Cell } = Table;\r\n  const { id, request, approversCount} = props;\r\n  const readyToFinalize = request.approvalCount > approversCount / 2;\r\n\r\n  const onApprove = async () => {\r\n    await executeOnBlockchain('approveRequest');\r\n  }\r\n\r\n  const onFinalize = async () => {\r\n    await executeOnBlockchain('finalizeRequest');\r\n  }\r\n\r\n  const executeOnBlockchain = async (method) => {\r\n    const campaign = Campaign(props.address);\r\n    const accounts = await web3.eth.getAccounts();\r\n    await campaign.methods[method](id)\r\n      .send({\r\n        from: accounts[0]\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Row disabled={request.complete} positive={readyToFinalize && !request.complete}>\r\n      <Cell>{id}</Cell>\r\n      <Cell>{request.description}</Cell>\r\n      <Cell textAlign='right'>\r\n        {web3.utils.fromWei(request.value, 'ether')}\r\n      </Cell>\r\n      <Cell>{request.recipient}</Cell>\r\n      <Cell textAlign='right'>\r\n        {request.approvalCount} / {approversCount}\r\n      </Cell>\r\n      <Cell>\r\n        { !request.complete &&\r\n          <Button basic color='green' onClick={onApprove}>Approve</Button>\r\n        } \r\n      </Cell>\r\n      <Cell>\r\n        { !request.complete && readyToFinalize &&\r\n          <Button color='teal' basic onClick={onFinalize}>Finalize</Button>\r\n        }\r\n      </Cell>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default RequestRow;"]},"metadata":{},"sourceType":"module"}